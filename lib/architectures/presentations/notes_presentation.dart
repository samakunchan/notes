import 'package:flutter/material.dart';import 'package:get_it/get_it.dart';import 'package:notes/architectures/presentations/save_notes_presentation.dart';import 'package:notes/core/models/api_response_model.dart';import 'package:notes/core/services/notes_service.dart';import 'delete_notes_presentation.dart';class NotesPresentation extends StatefulWidget {  const NotesPresentation({Key? key}) : super(key: key);  @override  State<NotesPresentation> createState() => _NotesPresentationState();}class _NotesPresentationState extends State<NotesPresentation> {  NoteService get service => GetIt.instance<NoteService>();  late Future<ApiResponseModel> _apiResponseModel;  @override  void initState() {    super.initState();    _apiResponseModel = service.getNotesList();  }  @override  Widget build(BuildContext context) {    return Scaffold(      appBar: AppBar(title: const Text('Listes des notes'),),      floatingActionButton: FloatingActionButton(        onPressed: () {          Navigator.of(context).push(MaterialPageRoute(builder: (_) => const SaveNotesPresentation()));        },        child: const Icon(Icons.add)      ),      body: FutureBuilder<ApiResponseModel>(        future: _apiResponseModel,        builder: (context, snapshot) {          if(snapshot.hasData) {            var notes = snapshot.data!.datas;            return notes.isNotEmpty ? ListView.separated(                itemBuilder: (_, index) {                  var date = DateTime.tryParse(notes[index]['updatedAt']) as DateTime;                  return Dismissible(                      key: ValueKey(notes[index]['id']),                      onDismissed: (direction) {                      },                      confirmDismiss: (direction) async {                        return await showDialog(context: context, builder: (_) => const DeleteNotesPresentation());                      },                      background: Container(                        color: Colors.red,                        padding: const EdgeInsets.only(left: 20),                        child: const Align(                          child: Icon(Icons.delete, color: Colors.white,),                          alignment: Alignment.centerLeft,                        ),                      ),                      secondaryBackground: Container(                        color: Colors.green,                        padding: const EdgeInsets.only(right: 20),                        child: const Align(                          child: Icon(Icons.archive, color: Colors.white,),                          alignment: Alignment.centerRight,                        ),                      ),                      child: ListTile(                        title: Text(                          '${notes[index]['title']}',                          style: TextStyle(color: Theme.of(context).primaryColor),                        ),                        subtitle: Text('${date.day.toString().padLeft(2,'0')}/${date.month.toString().padLeft(2,'0')}/${date.year}'),                        onTap: () {                          Navigator.of(context).push(MaterialPageRoute(builder: (_) => SaveNotesPresentation(                            note: notes[index],                          )));                        },                      ));                },                separatorBuilder: (_, __) => const Divider(height: 1, color: Colors.green,),                itemCount: notes.length            ): const Center(              child: Text('Aucune note enregistr'),            );          } else {            return Column(              mainAxisAlignment: MainAxisAlignment.center,              children: [                // const CircularProgressIndicator(),                Text('Message error presentation ligne 105: ${snapshot.error}')              ],            );          }        }      ),    );  }}